BINARY EXPONENTIATION
Instead of using O(n) approach
use O(logn) time 


//*******************************************************************************

-->RECCURSIVE
intution:-

x^n =  1                    if n = 0
    =  x^n/2 * x^n/2        if n is even
    =  x * x^n/2 * x^n/2    if n odd

ll bExpo(ll a,ll b){
    if(b==0) return 1;
    ll u = bExpo(a,b/2);
    if(b&1) return a*u*u;
    else return u*u;
}


//*******************************************************************************

--->ITERATIVE
intution:-
if i cant get back after half like reccursion
double it 

x^n =  1                    if n = 0
    =  x^n/2 * x^n/2        if n is even
    =  x * x^n/2 * x^n/2    if n odd

ll bExpo(ll a,ll b){
    ll ans=1;
    while(b){
        if(b&1){
            ans *= a;
            b--;
        }
        else{
            a *= a;
            b /=2;
        }

    }
    return ans;
}


//*******************************************************************************

--->ITERATIVE+BIT
intution:-
2^7 can be broken into 2^4 * 2^2 * 2^1;
7 is 111 in binary

ll bExpo(long a,ll b){
    double ans=1;
    while(b){
        if(b&1){
            ans *= a;
        }
        a =a*a;
        b>>=1;
    }
    return ans;
}

//cp
ll bExpo(ll a,ll b,ll m){
    ll ans=1;
    while(b){
        if(b&1LL){
            ans = (ans*a)%m;
        }
        a =(a*a)%m;
        b>>=1LL;
    }
    return ans%m;
}


int bExpo(int a,int b){
    int ans=1;
    while(b){
        if(b&1LL){
            ans = (ans*a)%mod;
        }
        a =(a*a)%mod;
        b>>=1LL;
    }
    return ans%mod;
}